{
    "scopeName": "source.daklang",
    "fileTypes": [
        "dak"
    ],
    "patterns": [
        {
            "include":"#comment"
        },
        {
            "include":"#constant"
        },
        {
            "include": "#entity"
        },
        {
            "include": "#keyword"
        },
        {
            "include": "#variable"
        }
    ],
    "repository": {
        "comment": {
            "patterns": [
                {
                    "begin": "/\\*",
                    "end": "\\*/",
                    "captures": {
                        "0": {
                            "name": "punctuation.definition.comment.dak"
                        }
                    },
                    "name": "comment.block.dak"
                },
                {
                    "begin": "//",
                    "beginCaptures": {
                        "0": {
                            "name":"punctuation.definition.comment.dak"
                        }
                    },
                    "end":"$",
                    "name":"comment.line.double-slash.dak"
                }
            ]
        },
        "constant": {
            "patterns": [
                {
                    "match": "\\b(true|false|uninit|null)\\b",
                    "name":"constant.language.dak"
                }
            ]
        },
        "entity": {
            "patterns": [
                {
                    "comment": "Function declarations",
                    "match": "^(\\bfunction\\b)(?:\\s+(\\([^\\)]+\\)\\s+)?(\\w+)(?=\\s*\\())?",
                    "captures": {
                        "1": {
                            "name": "keyword.function.dak"
                        },
                        "2": {
                            "patterns": []
                        },
                        "3": {
                            "patterns": [
                                {
                                    "match": "\\w+",
                                    "name": "entity.name.function.dak"
                                }
                            ]
                        }
                    }
                },
                {
                    "begin": "\\b(type)\\s+",
                    "beginCaptures": {
                        "1": {
                            "name": "keyword.type.dak"
                        }
                    },
                    "end": "(?!\\G)",
                    "patterns": [
                        {
                            "match": "\\d\\w*",
                            "name": "invalid.illegal.identifer.dak"
                        },
                        {
                            "match": "\\w+",
                            "name": "entity.name.type.dak"
                        }
                    ]
                },
                {
                    "match": "@\\w+",
                    "name": "entity.name.tag"
                },
                {
                    "begin": "(\\w+)({)",
                    "end": "}",
                    "beginCaptures": {
                        "1": {
                            "name": "entity.name.type.dak"
                        }
                    }
                }
            ]
        },
        "keyword": {
            "patterns": [
                {
                    "match": "\\b(break|case|return|continue|default|defer|if|else|switch)\\b",
                    "name": "keyword.control.dak"
                }
            ]
        },
        "variable": {
            "patterns": [
                {
                    "match": "(\\w+)(?:\\s*(:))?(?:\\s*(\\w+))?(?:\\s*(=))?",
                    "captures": {
                        "1": {
                            "name": "variable.other.declaration.dak"
                        },
                        "2": {
                            "name": "keyword.operator.initialize.dak"
                        },
                        "3": {
                            "name": "entity.name.type.dak"
                        },
                        "4": {
                            "name": "keyword.operator.assignment.dak"
                        }
                    }
                },
                {
                    "match": "\\b(\\w+)\\s*(=)",
                    "captures": {
                        "1": {
                            "name": "variable.other.dak"
                        },
                        "2": {
                            "name": "keyword.operator.assignment.dak"
                        }
                    }
                }
            ]
        }
    }
}